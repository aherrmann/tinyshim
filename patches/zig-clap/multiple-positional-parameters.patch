diff --git a/clap.zig b/clap.zig
index 4ea2ce9..1c2bdbe 100644
--- a/clap.zig
+++ b/clap.zig
@@ -1124,8 +1124,6 @@ pub fn help(
 
     var first_paramter: bool = true;
     for (params) |param| {
-        if (param.names.longest().kind == .positional)
-            continue;
         if (!first_paramter)
             try writer.writeByteNTimes('\n', opt.spacing_between_parameters);
 
@@ -1290,21 +1288,26 @@ fn printParam(
     comptime Id: type,
     param: Param(Id),
 ) !void {
-    try stream.writeAll(&[_]u8{
-        if (param.names.short) |_| '-' else ' ',
-        param.names.short orelse ' ',
-    });
+    if (param.names.short != null or param.names.long != null) {
+        try stream.writeAll(&[_]u8{
+            if (param.names.short) |_| '-' else ' ',
+            param.names.short orelse ' ',
+        });
+
+        if (param.names.long) |l| {
+            try stream.writeByte(if (param.names.short) |_| ',' else ' ');
+            try stream.writeAll(" --");
+            try stream.writeAll(l);
+        }
 
-    if (param.names.long) |l| {
-        try stream.writeByte(if (param.names.short) |_| ',' else ' ');
-        try stream.writeAll(" --");
-        try stream.writeAll(l);
+        if (param.takes_value != .none)
+            try stream.writeAll(" ");
     }
 
     if (param.takes_value == .none)
         return;
 
-    try stream.writeAll(" <");
+    try stream.writeAll("<");
     try stream.writeAll(param.id.value());
     try stream.writeAll(">");
     if (param.takes_value == .many)
@@ -1354,6 +1357,12 @@ test "clap.help" {
         \\    -d, --dd <V3>...
         \\            Both repeated option.
         \\
+        \\    <A>
+        \\            Help text
+        \\
+        \\    <B>...
+        \\            Another help text
+        \\
     );
 
     try testHelp(.{ .markdown_lite = false },
@@ -1713,7 +1722,7 @@ pub fn usage(stream: anytype, comptime Id: type, params: []const Param(Id)) !voi
     if (cos.bytes_written != 0)
         try cs.writeAll("]");
 
-    var positional: ?Param(Id) = null;
+    var has_positionals: bool = false;
     for (params) |param| {
         if (param.takes_value == .none and param.names.short != null)
             continue;
@@ -1725,7 +1734,7 @@ pub fn usage(stream: anytype, comptime Id: type, params: []const Param(Id)) !voi
             @ptrCast([*]const u8, s)[0..1]
         else
             param.names.long orelse {
-                positional = param;
+                has_positionals = true;
                 continue;
             };
 
@@ -1746,14 +1755,20 @@ pub fn usage(stream: anytype, comptime Id: type, params: []const Param(Id)) !voi
         try cs.writeByte(']');
     }
 
-    if (positional) |p| {
+    if (!has_positionals)
+        return;
+
+    for (params) |param| {
+        if (param.names.short != null or param.names.long != null)
+            continue;
+
         if (cos.bytes_written != 0)
             try cs.writeAll(" ");
 
         try cs.writeAll("<");
-        try cs.writeAll(p.id.value());
+        try cs.writeAll(param.id.value());
         try cs.writeAll(">");
-        if (p.takes_value == .many)
+        if (param.takes_value == .many)
             try cs.writeAll("...");
     }
 }
@@ -1811,4 +1826,16 @@ test "usage" {
             \\
         ),
     );
+    try testUsage("<number> <file> <file>", &comptime parseParamsComptime(
+        \\<number>
+        \\<file>
+        \\<file>
+        \\
+    ));
+    try testUsage("<number> <outfile> <infile>...", &comptime parseParamsComptime(
+        \\<number>
+        \\<outfile>
+        \\<infile>...
+        \\
+    ));
 }
